import {
  TableSchema,
  DatabaseType,
  GeneratedSQL,
  MultiDBGeneratedSQL,
  GenerationOptions,
} from "../../types";
import { MySQLGenerator } from "./mysql-generator";
import { PostgreSQLGenerator } from "./postgresql-generator";
import { SQLiteGenerator } from "./sqlite-generator";

export class SQLGenerator {
  static generateForAllDBs(
    schema: TableSchema,
    options: Partial<GenerationOptions> = {}
  ): MultiDBGeneratedSQL {
    const defaultOptions: GenerationOptions = {
      includeComments: true,
      includeIfNotExists: true,
      format: true,
      ...options,
    };

    return {
      mysql: this.generateCreateTable(schema, "mysql", defaultOptions),
      postgresql: this.generateCreateTable(
        schema,
        "postgresql",
        defaultOptions
      ),
      sqlite: this.generateCreateTable(schema, "sqlite", defaultOptions),
    };
  }

  static generateCreateTable(
    schema: TableSchema,
    dbType: DatabaseType,
    options: Partial<GenerationOptions> = {}
  ): GeneratedSQL {
    const generator = this.getGenerator(dbType);
    const warnings: string[] = [];
    const errors: string[] = [];
    console.log(`üîß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª:`, {
      tableName: schema.name,
      columnsCount: schema.columns?.length,
      dbType,
    });
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º—ã –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
      const validationResult = this.validateSchema(schema, dbType);
      warnings.push(...validationResult.warnings);
      errors.push(...validationResult.errors);

      if (errors.length > 0) {
        return {
          sql: "",
          dbType,
          warnings,
          errors,
        };
      }

      const finalOptions: GenerationOptions = {
        includeComments: true,
        includeIfNotExists: true,
        format: true,
        ...options,
      };

      const sql = generator.generateCreateTable(schema, finalOptions);
      console.log("üîß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:", sql);

      return {
        sql,
        dbType,
        warnings,
        errors: [],
      };
    } catch (error) {
      return {
        sql: "",
        dbType,
        warnings,
        errors: [`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error}`],
      };
    }
  }

  static generateInsert(
    tableName: string,
    data: Record<string, any>[],
    dbType: DatabaseType
  ): GeneratedSQL {
    const generator = this.getGenerator(dbType);

    try {
      const sql = generator.generateInsert(tableName, data);

      return {
        sql,
        dbType,
        warnings: [],
        errors: [],
      };
    } catch (error) {
      return {
        sql: "",
        dbType,
        warnings: [],
        errors: [`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ INSERT: ${error}`],
      };
    }
  }

  private static getGenerator(dbType: DatabaseType) {
    switch (dbType) {
      case "mysql":
        return new MySQLGenerator();
      case "postgresql":
        return new PostgreSQLGenerator();
      case "sqlite":
        return new SQLiteGenerator();
      default:
        throw new Error(`Unsupported database type: ${dbType}`);
    }
  }

  private static validateSchema(
    schema: TableSchema,
    dbType: DatabaseType
  ): { warnings: string[]; errors: string[] } {
    const warnings: string[] = [];
    const errors: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã
    if (!schema.name || schema.name.trim().length === 0) {
      errors.push("–ò–º—è —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
    if (schema.columns.length === 0) {
      errors.push("–¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    const columnNames = schema.columns.map((col) => col.name.toLowerCase());
    const duplicateColumns = columnNames.filter(
      (name, index) => columnNames.indexOf(name) !== index
    );

    if (duplicateColumns.length > 0) {
      errors.push(
        `–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫: ${duplicateColumns.join(", ")}`
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
    const primaryKeyColumns = schema.columns.filter((col) =>
      col.constraints.includes("PRIMARY_KEY")
    );

    if (primaryKeyColumns.length === 0) {
      warnings.push("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á");
    }

    if (primaryKeyColumns.length > 1) {
      warnings.push(
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞"
      );
    }

    return { warnings, errors };
  }
}

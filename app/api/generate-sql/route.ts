import { NextRequest, NextResponse } from "next/server";
import { SQLGenerator } from "@/lib/utils/generators/sql-generator";

export async function POST(request: NextRequest) {
  try {
    const { schema, selectedDB } = await request.json();
    console.log("üîç API –ø–æ–ª—É—á–∏–ª:", { schema, selectedDB });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!schema || !selectedDB) {
      return NextResponse.json(
        { error: "Missing required fields: schema and selectedDB" },
        { status: 400 }
      );
    }

    if (!schema.name || !schema.columns || schema.columns.length === 0) {
      return NextResponse.json(
        {
          error: "Invalid table schema: name and at least one column required",
        },
        { status: 400 }
      );
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL
    const sql = SQLGenerator.generateCreateTable(schema, selectedDB);
    console.log("üîç API —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª SQL:", sql);

    const response = {
      success: true,
      sql: sql,
      dbType: selectedDB,
      timestamp: new Date().toISOString(),
    };

    console.log("üì§ API –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç:", response);

    return NextResponse.json(response);
  } catch (error: any) {
    console.error("Generate SQL API error:", error);
    return NextResponse.json(
      {
        error: error.message || "Internal server error",
        success: false,
      },
      { status: 500 }
    );
  }
}
